# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: personal007
# "service" is the name of this project. This will also be added to your AWS resource names.
service: test-rimac-backend
frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs22.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: testServerless
  environment:
    DYNAMODB_TABLE: ${self:service}-appointments-${self:provider.stage}
    SNS_TOPIC_ARN: !Ref AppointmentTopic
    SQS_PE_URL: !Ref PeruQueue
    SQS_CL_URL: !Ref ChileQueue
    EVENT_BUS_NAME: ${self:service}-event-bus-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource:
            - !GetAtt AppointmentsTable.Arn
            - !Sub '${AppointmentsTable.Arn}/index/*'
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref AppointmentTopic
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
          Resource:
            - !GetAtt ChileQueue.Arn
            - !GetAtt PeruQueue.Arn
            - !GetAtt CompletedAppointmentsQueue.Arn
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: !GetAtt AppointmentEventBus.Arn

plugins:
  - serverless-offline
  - serverless-openapi-documentation

custom:
  documentation:
    version: '1.0.0'
    title: 'Appointment API'
    description: 'API para gestión de agendamientos PE y CL'

functions:
  # Lambda principal: Crear, Listar y Actualizar
  appointment:
    handler: src/handlers/appointment.handler
    timeout: 30
    events:
      - http:
          path: appointments
          method: post
          cors: true
          documentation:
            summary: Registrar petición de agendamiento
            description: Crea un nuevo agendamiento con estado "pending" y envía a procesamiento
      - http:
          path: appointments/{insuredId}
          method: get
          cors: true
          documentation:
            summary: Listar agendamientos por asegurado
            description: Retorna todos los agendamientos de un asegurado con sus estados
      - sqs:
          arn: !GetAtt CompletedAppointmentsQueue.Arn
          batchSize: 10
          maximumBatchingWindowInSeconds: 5

  docs:
    handler: src/handlers/swagger.handler
    events:
      - http:
          method: GET
          path: /docs

  # Lambda para procesar agendamientos de Perú
  appointmentPE:
    handler: src/handlers/appointment-country.handler
    timeout: 60
    environment:
      COUNTRY: PE
      RDS_HOST: ${env:RDS_PE_HOST}
      RDS_USER: ${env:RDS_PE_USER}
      RDS_PASSWORD: ${env:RDS_PE_PASSWORD}
      RDS_DATABASE: ${env:RDS_PE_DATABASE}
      RDS_PORT: ${env:RDS_PE_PORT, '3306'}
    events:
      - sqs:
          arn: !GetAtt PeruQueue.Arn
          batchSize: 10
          maximumBatchingWindowInSeconds: 5

  # Lambda para procesar agendamientos de Chile
  appointmentCL:
    handler: src/handlers/appointment-country.handler
    timeout: 60
    environment:
      COUNTRY: CL
      RDS_HOST: ${env:RDS_CL_HOST}
      RDS_USER: ${env:RDS_CL_USER}
      RDS_PASSWORD: ${env:RDS_CL_PASSWORD}
      RDS_DATABASE: ${env:RDS_CL_DATABASE}
      RDS_PORT: ${env:RDS_CL_PORT, '3306'}
    events:
      - sqs:
          arn: !GetAtt ChileQueue.Arn
          batchSize: 10
          maximumBatchingWindowInSeconds: 5

resources:
  Resources:
    # Dynamo Table
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # SNS Topic
    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-appointments-${self:provider.stage}
        DisplayName: Medical Appointments Topic

    # SQS Subscriptions con filtros por país
    PeruQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref AppointmentTopic
        Endpoint: !GetAtt PeruQueue.Arn
        FilterPolicy:
          countryISO:
            - PE
        RawMessageDelivery: false

    ChileQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref AppointmentTopic
        Endpoint: !GetAtt ChileQueue.Arn
        FilterPolicy:
          countryISO:
            - CL
        RawMessageDelivery: false

    # SQS Queues por país
    PeruQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-peru-${self:provider.stage}
        VisibilityTimeout: 360
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt PeruDLQ.Arn
          maxReceiveCount: 3

    PeruDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-peru-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600

    ChileQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-chile-${self:provider.stage}
        VisibilityTimeout: 360
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt ChileDLQ.Arn
          maxReceiveCount: 3

    ChileDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-chile-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600

    # SQS para recibir eventos de EventBridge (completados)
    CompletedAppointmentsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-completed-${self:provider.stage}
        VisibilityTimeout: 180
        MessageRetentionPeriod: 1209600

    # SQS Policies
    PeruQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref PeruQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt PeruQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic

    ChileQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref ChileQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt ChileQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic

    # EventBridge
    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:provider.environment.EVENT_BUS_NAME}

    # Regla de EventBridge que envía eventos a SQS
    AppointmentEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref AppointmentEventBus
        EventPattern:
          source:
            - appointment.service
          detail-type:
            - AppointmentProcessed
        State: ENABLED
        Targets:
          - Arn: !GetAtt CompletedAppointmentsQueue.Arn
            Id: CompletedAppointmentsQueueTarget

    # Política para que EventBridge pueda enviar a SQS
    EventBridgeToSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref CompletedAppointmentsQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt CompletedAppointmentsQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt AppointmentEventRule.Arn

  Outputs:
    AppointmentTopicArn:
      Value: !Ref AppointmentTopic
      Export:
        Name: ${self:service}-${self:provider.stage}-TopicArn

    DynamoDBTableName:
      Value: !Ref AppointmentsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-TableName